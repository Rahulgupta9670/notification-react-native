import React, {useEffect, useState} from 'react';
import {View, Text, Button, StyleSheet, TextInput} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import PushNotification from 'react-native-push-notification';
import PushNotificationIOS from '@react-native-community/push-notification-ios';
import messaging from '@react-native-firebase/messaging';
import axios from "axios"

const Notifications = () => {
  function configure() {
    // messaging().setBackgroundMessageHandler(message => {
    //   setBadgeCount(message);
    //   return Promise.resolve();
    // });
    PushNotification.configure({
      onRegister: function (data) {
        console.log('TOKEN:', data.token);
        AsyncStorage.setItem('notification', data.token);
      },

      onNotification: async function (notification) {
        console.log('onNotification: ON RECIEVE:', notification);
        if (notification != null) {
          console.log('show notification ');
          showNotification(notification);
        }
      },

      senderID: '957880401888',

      permissions: {
        alert: true,
        badge: true,
        sound: true,
      },

      popInitialNotification: true,

      requestPermissions: true,
    });

    PushNotification.createChannel(
      {
        channelId: 'MychannelId', // (required)
        channelName: 'My channel', // (required)
        channelDescription: 'A channel to categorise your notifications', // (optional) default: undefined.
        soundName: 'default', // (optional) See `soundName` parameter of `localNotification` function
        importance: 4, // (optional) default: 4. Int value of the Android notification importance
        vibrate: true, // (optional) default: true. Creates the default vibration patten if true.
      },
      created => console.log(`createChannel returned '${created}'`),
    );

    // PushNotification.createChannel(
    //   {
    //     channelId: 'channel-id',
    //     channelName: 'my channel',
    //     // channelDescription:'Achannel for notification',
    //     // playSound:true,
    //     // soundName:"default",
    //     // importance:10,

    //     vibrate: true,
    //   },
    //   created => console.log(`channel created  ${created}`),
    // );
  }

  function showNotif() {
    // PushNotification.localNotification({
    //   /* Android Only Properties */
    //   channelId: 'channel-id',
    //   channelName: 'my channel',
    //   // date: new Date(Date.now() + 60 * 1000), // in 60 secs
    //   message: 'hyyy  rahul',
    //   id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    //   title: 'Rahul gupta', // (optional)
    //   message: 'My Notification Message cpm', // (required)
    //   showWhen: true, // (optional) default: true
    //   autoCancel: true, // (optional) default: true
    //   largeIcon: 'ic_launcher', // (optional) default: "ic_launcher". Use "" for no large icon.
    //   largeIconUrl:
    //     'https://t4.ftcdn.net/jpg/03/64/21/11/360_F_364211147_1qgLVxv1Tcq0Ohz3FawUfrtONzz8nq3e.jpg', // (optional) default: undefined
    //   smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher". Use "" for default small icon.
    //   bigText:
    //     'My big text that will be shown when notification is expanded. Styling can be done using HTML tags(see android docs for details)', // (optional) default: "message" prop
    //   subText: 'This is a subText', // (optional) default: none
    //   bigPictureUrl:
    //     'https://t4.ftcdn.net/jpg/03/64/21/11/360_F_364211147_1qgLVxv1Tcq0Ohz3FawUfrtONzz8nq3e.jpg', // (optional) default: undefined
    //   messageId: 'google:message_id', // (optional) added as `message_id` to intent extras so opening push notification can find data stored by @react-native-firebase/messaging module.

    //   actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more

    //   color: 'red', // (optional) default: system default
    // });

    PushNotification.localNotificationSchedule({
      title: 'My notification title',
      date: new Date(new Date().getTime() + 3000),
      message: 'My notification Message',
      allowWhileIdle: false,
      channelId: 'channel-id',
    });
  }

  function showNotification(notification) {
    console.log('show notification from server');
    PushNotification.localNotification({
      channelId: 'MychannelId', // (required) channelId, if the channel doesn't exist, notification will not trigger.
      autoCancel: true,
      largeIcon: 'ic_launcher',
      smallIcon: 'ic_notification',
      bigText: 'My big text that will be shown when notification is expanded',
      subText: 'This is a subText(Rahul)',
      color: 'green',
      vibrate: true,
      vibration: 300,
      title: notification ? notification.title : 'Notification Title',
      message: notification ? notification.message : 'Hey Rahul',
      playSound: true,
      soundName: 'default',
      actions: '["Accept", "Reject"]',
      invokeApp: true,
      allowWhileIdle: true,
      priority: 'high',
    });
  }

  

  async function SendMessage(notification) {
    console.log('SendMessage');
    const this_token = await AsyncStorage.getItem('notification');
    // const this_token = await JSON.parse(data1);
    // console.log('red lable--------------', data);
    // const this_token = await get_item('firebase_token');
    console.log('token on sendmsg', this_token);
    const messages = {
      registration_ids: [this_token],
      notification: {
        title: 'Rahul gupta ',
        body: notification ? notification : 'Testing send msgs new',
      
        sound: 1,
        android_channel_id: 'MychannelId',
        vibrate: 1,
        show_in_foreground: false,
        priority: 'high',
        content_available: true,
      },
      data: {
        title: 'Demo',
        body: 'Testing send msgs',
        testdata1: 50,
        testdata2: 1,
        customId: "01",
        badge: 0,
        alert: "Alert"
      },
    };
    const FIREBASE_APIKEY = await AsyncStorage.getItem("notification")
    let headers = new Headers({
      'Content-Type': 'application/json',
      Authorization: 'key=' + 'AAAA3wYe_-A:APA91bHwYPOoSZnHYAbFGX_GGyo7wbXxxIlPWVnsXi8N0AdUApoQ0LiLBCntid7Qjh8ij4AWwbzhIWZySTvnZKN8zzDZpzI52CdeRDvAl6SlyPs128DySoNW7GHFllLF8-6V3FCX2pHc',
    });

    console.log("postData:",messages,'headers:',headers)
    await fetch('https://fcm.googleapis.com/fcm/send', {
      method: 'POST',
      headers,
      body: JSON.stringify(messages),
    })
      .then(response => {
        console.log('res of send:',response.json());
        return response.json();
      })
      .then(res => {
        console.log('res:',res);
        notify('Message sent');
      })
      .catch(err => {
        console.log(err);
      });

  // axios.post('https://fcm.googleapis.com/fcm/send',)
  }

  return {
    configure: configure,
    showNotif: showNotif,
    SendMessage: SendMessage,
  };
};

const MyNotif = Notifications();
export default MyNotif;
// channelDescription: 'Achannel for notification',
// playSound: true,
// soundName: 'default',
// importance: 10,
// vibration: 1000,
// vibrate: true,
// // (required) channelId, if the channel doesn't exist, notification will not trigger.
// ticker: 'My Notification Ticker', // (optional)

// showWhen: true, // (optional) default: true
// autoCancel: true, // (optional) default: true
// largeIcon: 'ic_launcher', // (optional) default: "ic_launcher". Use "" for no large icon.
// largeIconUrl:
//   'https://t4.ftcdn.net/jpg/03/64/21/11/360_F_364211147_1qgLVxv1Tcq0Ohz3FawUfrtONzz8nq3e.jpg', // (optional) default: undefined
// smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher". Use "" for default small icon.
// bigText:
//   'My big text that will be shown when notification is expanded. Styling can be done using HTML tags(see android docs for details)', // (optional) default: "message" prop
// subText: 'This is a subText', // (optional) default: none
// bigPictureUrl:
//   'https://t4.ftcdn.net/jpg/03/64/21/11/360_F_364211147_1qgLVxv1Tcq0Ohz3FawUfrtONzz8nq3e.jpg', // (optional) default: undefined
// bigLargeIcon: 'ic_launcher', // (optional) default: undefined
// bigLargeIconUrl:
//   'https://t4.ftcdn.net/jpg/03/64/21/11/360_F_364211147_1qgLVxv1Tcq0Ohz3FawUfrtONzz8nq3e.jpg', // (optional) default: undefined
// color: 'red', // (optional) default: system default

// tag: 'some_tag', // (optional) add tag to message
// group: 'group', // (optional) add group to message
// groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
// ongoing: false, // (optional) set whether this is an "ongoing" notification
// priority: 'high', // (optional) set notification priority, default: high
// visibility: 'private', // (optional) set notification visibility, default: private
// ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear). should be used in combine with `com.dieam.reactnativepushnotification.notification_foreground` setting
// shortcutId: 'shortcut-id', // (optional) If this notification is duplicative of a Launcher shortcut, sets the id of the shortcut, in case the Launcher wants to hide the shortcut, default undefined
// onlyAlertOnce: false, // (optional) alert will open only once with sound and notify, default: false

// when: null, // (optional) Add a timestamp (Unix timestamp value in milliseconds) pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
// usesChronometer: false, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
// timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null

// messageId: 'google:message_id', // (optional) added as `message_id` to intent extras so opening push notification can find data stored by @react-native-firebase/messaging module.

// actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
// invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true

// /* iOS only properties */
// category: '', // (optional) default: empty string
// subtitle: 'My Notification Subtitle', // (optional) smaller title below notification title

// /* iOS and Android properties */
// id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
// title: 'Rahul gupta', // (optional)
// message: 'My Notification Message', // (required)
// picture: 'https://www.example.tld/picture.jpg', // (optional) Display an picture with the notification, alias of `bigPictureUrl` for Android. default: undefined
// userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
// playSound: false, // (optional) default: true
// soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
// number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
// repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
